buildscript {
    ext.kotlin_version = '1.5.30'

    repositories {
        mavenCentral()
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }
}

def printOutput(def output) {
    return tasks.create("printOutput") {
        for (line in output.toString().readLines()) {
            println "#educational_plugin" + line
        }
    }
}

subprojects {
    apply plugin: 'application'
    apply plugin: 'java'
    apply plugin: 'kotlin'

    sourceCompatibility = 1.8

    repositories {
        mavenCentral()
        
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        testImplementation group: 'junit', name: 'junit', version: '4.12'
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.2.2"
    }

    compileKotlin.destinationDir = compileJava.destinationDir

    compileKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }
    compileTestKotlin {
        kotlinOptions.jvmTarget = "1.8"
    }

    sourceSets {
        main {
            kotlin.srcDir 'src'
            java.srcDir 'src'
        }
        test {
            kotlin.srcDir 'test'
            java.srcDir 'test'
        }
    }

    mainClassName = project.hasProperty("mainClass") ? project.getProperty("mainClass") : ""

    test {
        outputs.upToDateWhen { false }
        afterTest { TestDescriptor test, TestResult result ->
            if (result.resultType == TestResult.ResultType.FAILURE) {
                def message = result.exception?.message ?: "Wrong answer"
                def lines = message.readLines()
                println "#educational_plugin FAILED + " + lines[0]
                lines[1..-1].forEach { line ->
                    println "#educational_plugin" + line
                }
                // we need this to separate output of different tests
                println
            }
        }
    }

    def runOutput = new ByteArrayOutputStream()
    tasks.run.setStandardOutput(runOutput)
    tasks.run.doLast { printOutput(runOutput) }
}

project(':util') {
    dependencies {
        implementation group: 'junit', name: 'junit', version: '4.12'
    }
}

configure(subprojects.findAll {it.name != 'util'}) {
  dependencies {
      implementation project(':util').sourceSets.main.output
      testImplementation project(':util').sourceSets.test.output
  }
}

wrapper {
    gradleVersion = '6.6'
    distributionUrl = distributionUrl.replace("bin", "all")
}
